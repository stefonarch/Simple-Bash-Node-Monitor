#!/bin/bash
# Please edit the lines below. If the node is NOT e representative node you have to change the "BLOCKS" line below.
account=none
NodeName=MyNode

# path and filename for your site, should be correct for ubuntu/nginx
html_path="/var/www/html/index.htm"
html_directory="/var/www/html/"
# path to RaiBlocks folder, NO slash at the end
raiblocks_path=/root/RaiBlocks


##### Edit carefully from here on, read comments ######

RUNNING=$(curl --connect-timeout 3 --max-time 5 -g -d '{ "action": "version" }' [::ffff:127.0.0.1]:7076);
        if [ $? -ne 0 ]; then
#node not running
echo "<p> ... Node not running .... " >> $html_path
echo "</p></body></html>" >> $html_path
        else

/usr/local/bin/weight_set $account
echo  "<head><link rel='stylesheet' type='text/css' href='style.css'><title>Node Monitor $NodeName</title><meta http-equiv='refresh' content='30'></head><body><h2>Simple Bash Node Monitor</h2><p>Block" > $html_path.gen
/usr/local/bin/blockcount| grep count |sed 's/"/ /g'  >> $html_path.gen
echo "<br/>Node running for <b>" >> $htmlpath.gen
ps -eo comm,etime | grep -i rai_node | awk '{print $2}' | sed 's/-/ days /' | awk -F'[: ]+' '{if($2 == "days" && NF==5){print $1+0, $2, $3+0"h:"$4+0"m"}else if($2 == "days" && NF==4){print $1+0, $2, $3+0"m:"$4+0"s"}else{ if(NF==2){print $1+0"m:"$2+0"sec"}else{print $1+0"h:"$2+0"m"}}}' >> $html_path.gen

/usr/local/bin/blockcount| grep unchecked |sed 's/"/ /g' >> $html_path.gen
echo "</b><br/>Node Version:" >> $html_path.gen

/usr/local/bin/version | grep Rai | awk '{print $3}'|sed 's/"//g' >> $html_path.gen
echo "<br/>Node Account:<b>" >> $html_path.gen
echo $account  >> $html_path.gen

echo  "</b><br/>Peers: " >> $html_path.gen
/usr/local/bin/peers|wc -l >> $html_path.gen

#this below needs CPU and time, does not work on small setups
#echo  "<br/>Delegators: " >> $html_path.gen
#/usr/local/bin/delegator_count | grep count |awk '{print $2}'| sed 's:^.\(.*\).$:\1:'  >> $html_path.gen
echo  "<br/>Representatives online: " >> $html_path.gen
/usr/local/bin/rep_online | wc -l >> $html_path.gen

echo  "<br/>Voting Weight: " >> $html_path.gen
/usr/local/bin/account_weight |awk '{print $2}'| sed 's:^.\(.*\).$:\1:'|sed -r 's/.{30}$//' |xargs printf "%'.0f\n"  >> $html_path.gen
echo  "<br/>Server:" >> $html_path

cat /etc/issue >>  $html_path.gen

echo  "<br/>CPU Load:" >> $html_path.gen
grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}'|xargs printf "%'.2f\n"   >> $html_path.gen
echo "%<br/>" >> $html_path.gen

free -m | awk 'NR==2{printf "Memory Usage: %s/%sMB (%.2f%%)\n", $3,$2,$3*100/$2 }' >> $html_path.gen

LASTLOG=$(ls $raiblocks_path/log/ |sort -rn | head -1)
LOGTIME=$(echo $LASTLOG | cut -c 16-23|sed 's/-/:/g')
NOW=$(date +"%H:%M:%S")
StartDate=$(date -u -d "$LOGTIME" +"%s")
FinalDate=$(date -u -d "$NOW" +"%s")
SINCE=$(date -u -d "0 $FinalDate sec - $StartDate sec" +"%H:%M:%S")
SECS="1970-01-01 $SINCE"
TOTSEC=$(date -d "$SECS" +%s)
FORKS=$(cat $raiblocks_path/log/$LASTLOG | grep -i fork|wc -l)
# Uncomment this and comment the next line if your node is NOT a representative and has 0 voting weight
#BLOCKS=$(cat $raiblocks_path/log/$LASTLOG|grep  republished | wc -l)
BLOCKS=$(cat $raiblocks_path/log/$LASTLOG|grep  confirmed | wc -l)
TOTMIN=$(($TOTSEC/60))

echo "<br/><br/>" >> $html_path.gen
echo "[ Log Talking Time" >> $html_path.gen
date -u -d "0 $FinalDate sec - $StartDate sec" +"%H:%M" >>  $html_path.gen
echo " ]<br/>" >> $html_path.gen
echo "$(($BLOCKS/$TOTMIN)) Blocks/min" >> $html_path.gen
echo "<br/>" >> $html_path.gen
cat  $raiblocks_path/log/$LASTLOG | grep -i fork|wc -l >> $html_path.gen
echo  "forks detected and voting requested to" >> $html_path.gen
cat  $raiblocks_path/log/$LASTLOG|grep  Broadcasted  |tail -1|head -1| awk '{print $10}' >>  $html_path.gen
echo "representatives" >> $html_path.gen

echo "<br/>" >> $html_path.gen
cat $raiblocks_path/log/$LASTLOG|grep  Broadcasted |wc -l >>  $html_path.gen
echo "block confirm requests (2 per fork) broadcasted" >> $html_path.gen
echo "<br/>" >> $html_path.gen
echo "A fork detected every $(($TOTSEC/$FORKS)) seconds" >>  $html_path.gen
echo "<br/>" >> $html_path.gen
echo "<br/>" >> $html_path.gen 

cat $raiblocks_path/log/$LASTLOG|grep -i found|wc -l >>  $html_path.gen
echo "representatives found " >> $html_path.gen
echo "<br/>" >> $html_path.gen
echo $BLOCKS |xargs printf "%'.0f\n" >>  $html_path.gen
echo "blocks confirmed to peers" >> $html_path.gen
# for NON voting nodes comment above and uncomment below
#echo "blocks republished to peers" >> $html_path.gen

echo "<br/>" >> $html_path.gen
cat $raiblocks_path/log/$LASTLOG|grep  establis |wc -l|xargs printf "%'.0f\n" >>  $html_path.gen
echo "Connections established" >> $html_path.gen
echo  "<h3>Network Protocol Versions</h3>" >> $html_path.gen

#table network versions
TOTALPEERS=$(/usr/local/bin/peers |wc -l)

echo "<table><tbody>"  >> $html_path.gen
for i in \
7 \
6 \
5 \
4 \
3
        do
        echo "<tr><td class="version">"Version $i"</td><td class="peercount">"  >> $html_path.gen
                /usr/local/bin/peers |awk '{print $2}'| sed 's:^.\(.*\).$:\1:' |grep  $i|wc -l  >> $html_path.gen
                PEERS=$(/usr/local/bin/peers |awk '{print $2}'| sed 's:^.\(.*\).$:\1:' |grep  $i|wc -l  )
                echo "</td><td class="percent">" >> $html_path.gen
                echo "scale = 2; ($PEERS / $TOTALPEERS)" | bc -l | awk -F '.' '{print $2}' >> $html_path.gen
               echo "%</td></tr>" >>  $html_path.gen
        done
        echo "</tbody></table>" >> $html_path.gen



echo "<h4>Errors:</h4><p class="medium">" >> $html_path.gen
cat $raiblocks_path/log/$LASTLOG|grep  canceled |wc -l |xargs printf "%'.0f\n" >>  $html_path.gen
echo "type Operation canceled" >> $html_path.gen

echo "<br/>" >> $html_path.gen
cat $raiblocks_path/log/$LASTLOG|grep  reset |wc -l >>  $html_path.gen
echo "Connections reset by peer" >> $html_path.gen

echo "<br/>" >> $html_path.gen
cat $raiblocks_path/log/$LASTLOG|grep  file |wc -l|xargs printf "%'.0f\n" >>  $html_path.gen
echo "type End of file" >> $html_path.gen
echo "<br/>" >> $html_path.gen

cat $raiblocks_path/log/$LASTLOG|grep  initiat |wc -l >>  $html_path.gen
echo "Error initiating bootstrap connection to ... No route to host" >> $html_path.gen

echo "</p></body>" >> $html_path.gen

# update api.php for https://nanonode.ninja/ 
cp $html_directory/api $html_directory/api.php
blockcount |tail -n 3|sed -e 's/count/currentBlock/g' >> $html_directory/api.php
cp  $html_path.gen   $html_path
fi